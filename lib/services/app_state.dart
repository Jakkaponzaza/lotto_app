// ======================================================
// üîß APPLICATION STATE MANAGEMENT
// ======================================================
// File: lib/services/app_state.dart
// Purpose: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
// Features:
//   - User authentication state
//   - Ticket management
//   - Purchase operations
//   - Prize claiming
//   - System statistics
// ======================================================

// üì¶ FLUTTER & THIRD-PARTY IMPORTS
import 'package:flutter/foundation.dart';
import 'package:intl/intl.dart';

// üèóÔ∏è INTERNAL IMPORTS - DATA MODELS
import '../models.dart';

// üíæ INTERNAL IMPORTS - DATA REPOSITORIES
import '../repositories/websocket_lotto_repository.dart';
import '../repositories/lotto_repository.dart';

// üîÑ DART CORE IMPORTS
import 'dart:async';

// ======================================================
//  MAIN APPLICATION STATE CLASS
// ======================================================
class LottoAppState extends ChangeNotifier {
  // REPOSITORY DEPENDENCY
  final LottoRepository repo;

  // LOADING & ERROR STATES
  bool isLoading = false;
  String? errorMessage;
  
  // STREAM SUBSCRIPTIONS FOR REAL-TIME UPDATES
  StreamSubscription? _userStreamSubscription;
  StreamSubscription? _ticketsStreamSubscription;
  StreamSubscription? _userTicketsStreamSubscription;

  LottoAppState(this.repo) {
    _setupRealtimeListeners();
    initializeApp();
  }
  
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ real-time listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö WebSocket
  void _setupRealtimeListeners() {
    if (repo is WebSocketLottoRepository) {
      final wsRepo = repo as WebSocketLottoRepository;
      
      // ‡∏ü‡∏±‡∏á user updates ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó wallet ‡πÅ‡∏ö‡∏ö real-time
      _userStreamSubscription = wsRepo.userStream.listen((user) {
        debugPrint('üîÑ Real-time user update received: wallet=${user.currentWallet}');
        if (currentUser != null && user.userId == currentUser!.userId) {
          debugPrint('üîÑ Updating current user wallet from ${currentUser!.currentWallet} to ${user.currentWallet}');
          currentUser = user;
          notifyListeners();
          debugPrint('üîÑ UI notified of wallet change');
        }
      });
      
      // ‡∏ü‡∏±‡∏á tickets updates ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πã‡∏ß real-time
      _ticketsStreamSubscription = wsRepo.ticketsStream.listen((tickets) {
        debugPrint('üé´ Real-time tickets update received: ${tickets.length} tickets');
        allTickets = tickets;
        notifyListeners();
        debugPrint('üé´ UI notified of tickets change');
      });
      
      // ‡∏ü‡∏±‡∏á user tickets updates ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô real-time
      _userTicketsStreamSubscription = wsRepo.userTicketsStream.listen((tickets) {
        debugPrint('üé´ Real-time user tickets update received: ${tickets.length} user tickets');
        userTickets = tickets;
        notifyListeners();
        debugPrint('üé´ UI notified of user tickets change');
      });
    }
  }

  // ======================================================
  // APPLICATION INITIALIZATION
  // ======================================================

  Future<void> initializeApp() async {
    if (isLoading) {
      debugPrint('DEBUG: App already initializing, skipping...');
      return;
    }
    
    try {
      isLoading = true;
      errorMessage = null;
      notifyListeners();

      debugPrint('DEBUG: Starting app initialization...');
      
      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πã‡∏ß‡∏Å‡πà‡∏≠‡∏ô - ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
      await loadTickets();
      debugPrint('DEBUG: Tickets loaded successfully');
      
      // ‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ï‡∏≠‡∏ô init ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
      // ‡∏à‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£ login
      
      debugPrint('DEBUG: App initialization completed successfully');
      isLoading = false;
      
    } catch (e) {
      debugPrint('DEBUG: App initialization error: $e');
      isLoading = false;
      errorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏õ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï';
    }
    
    notifyListeners();
  }

  // ======================================================
  // APPLICATION DATA STATE
  // ======================================================

  final formatter = NumberFormat.decimalPattern('th');

  // USER STATE
  AppUser? currentUser;

  // TICKET DATA
  List<Ticket> allTickets = [];
  List<Ticket> userTickets = [];
  final Set<String> selected = {}; // Selected tickets for purchase

  // DRAW & PRIZE DATA
  DrawResult? latestDraw;

  // ======================================================
  // USER MANAGEMENT METHODS
  // ======================================================

  void setCurrentUserFromJson(Map<String, dynamic> userData) {
    currentUser = AppUser.fromJson(userData);
    notifyListeners();
  }

  // ======================================================
  // UI HELPER GETTERS
  // ======================================================

  int get lottoPrice => LottoConstants.lottoPrice;

  String get walletText {
    final wallet = currentUser?.wallet ?? 0;
    debugPrint('DEBUG: walletText getter called - wallet: $wallet');
    return currentUser == null
        ? '‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô: 0 ‡∏ö‡∏≤‡∏ó'
        : '‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô: ${formatter.format(wallet)} ‡∏ö‡∏≤‡∏ó';
  }

  List<String> get availableTickets => allTickets
      .where((t) => t.status == 'available')
      .map((t) => t.number)
      .toList();

  // ======================================================
  // TICKET MANAGEMENT METHODS
  // ======================================================

  Future<void> loadTickets() async {
    try {
      debugPrint('DEBUG: Loading tickets...');
      
      if (repo is WebSocketLottoRepository) {
        final wsRepo = repo as WebSocketLottoRepository;
        
        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ WebSocket ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô
        if (!wsRepo.isConnected) {
          debugPrint('DEBUG: WebSocket not connected, attempting to connect...');
          await wsRepo.connect();
        }
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
        debugPrint('DEBUG: Requesting all tickets from WebSocket...');
        final freshTickets = await wsRepo.listAllTickets();
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï allTickets ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        allTickets = freshTickets;
        
        debugPrint('DEBUG: Received ${allTickets.length} tickets from WebSocket');
      } else {
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö repository ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        allTickets = await repo.listAllTickets();
      }
      
      debugPrint('DEBUG: Total tickets loaded: ${allTickets.length}');
      if (allTickets.isNotEmpty) {
        debugPrint('DEBUG: Sample tickets: ${allTickets.take(3).map((t) => '${t.number}(${t.status})').toList()}');
      }

      // ‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î user tickets ‡∏ï‡∏≠‡∏ô init ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
      // ‡∏à‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏±‡∏á login ‡πÅ‡∏ó‡∏ô
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï UI
      notifyListeners();
      
    } catch (e) {
      debugPrint('DEBUG: Error loading tickets: $e');
      // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ default ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏≠‡∏õ crash
      allTickets = [];
      userTickets = [];
      errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πã‡∏ß: $e';
      notifyListeners();
    }
  }

  // ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡πã‡∏ß‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
  Future<void> loadUserTickets() async {
    if (currentUser == null) {
      debugPrint('DEBUG: No current user - cannot load user tickets');
      return;
    }
    
    try {
      debugPrint('DEBUG: Loading user tickets for: ${currentUser!.username}');
      userTickets = await repo.listUserTickets(currentUser!.id);
      debugPrint('DEBUG: Loaded ${userTickets.length} user tickets');
      notifyListeners();
    } catch (e) {
      debugPrint('DEBUG: Error loading user tickets: $e');
      userTickets = [];
      notifyListeners();
    }
  }

  Future<void> loginOwner() async {
    currentUser = await repo.getOwner();
    await loadTickets();
    await loadLatestDraw(); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
    notifyListeners();
  }

  bool get isAdmin =>
      currentUser?.role == UserRole.admin ||
      currentUser?.role == UserRole.owner;

  Future<void> loginOrRegisterMember(String username,
      {int? initialWallet}) async {
    currentUser = await repo.loginOrRegisterMember(
      username: username,
      initialWallet: initialWallet,
    );
    await loadTickets();
    await loadLatestDraw(); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
    notifyListeners();
  }

  Future<void> registerMember({
    required String username,
    required String email,
    required String password,
    String? phone,
    int? initialWallet,
  }) async {
    if (repo is WebSocketLottoRepository) {
      final wsRepo = repo as WebSocketLottoRepository;
      currentUser = await wsRepo.registerMember(
        username: username,
        email: email,
        password: password,
        phone: phone,
        wallet: initialWallet,
      );
    } else {
      currentUser = await repo.loginOrRegisterMember(
        username: username,
        initialWallet: initialWallet,
      );
    }
    await loadTickets();
    await loadLatestDraw(); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
    notifyListeners();
  }

  Future<void> loginMember({
    required String username,
    required String password,
  }) async {
    try {
      isLoading = true;
      errorMessage = null;
      notifyListeners();

      debugPrint('DEBUG: Attempting login for user: $username');

      if (repo is WebSocketLottoRepository) {
        final wsRepo = repo as WebSocketLottoRepository;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô
        if (!wsRepo.isConnected) {
          debugPrint('DEBUG: WebSocket not connected, connecting...');
          await wsRepo.connect();
        }
        
        final response = await wsRepo.loginMember(
          username: username,
          password: password,
        );

        debugPrint('DEBUG: Login response received: ${response.toString()}');

        currentUser = response;
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        try {
          debugPrint('DEBUG: Loading user-specific data after login...');
          await loadUserTickets(); // ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡πã‡∏ß‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
          
          // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á user tickets real-time updates ‡∏´‡∏•‡∏±‡∏á login
          if (repo is WebSocketLottoRepository) {
            final wsRepo = repo as WebSocketLottoRepository;
            wsRepo.getUserTickets(currentUser!.id);
            debugPrint('DEBUG: Started listening for user tickets updates');
          }
        } catch (e) {
          debugPrint('DEBUG: Error loading user data after login: $e');
          // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ error ‡∏ô‡∏µ‡πâ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£ login
        }
        
        isLoading = false;
        notifyListeners();

        debugPrint('DEBUG: Login successful for ${currentUser?.username}, wallet: ${currentUser?.wallet}');
      } else {
        throw Exception('‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ WebSocket ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
      }
    } catch (e) {
      debugPrint('DEBUG: Login failed: $e');
      isLoading = false;
      currentUser = null;
      errorMessage = '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $e';
      notifyListeners();
      rethrow; // ‡∏™‡πà‡∏á error ‡∏ï‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ UI ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
    }
  }

  // ======================================================
  // PURCHASE MANAGEMENT METHODS
  // ======================================================

  void toggleSelect(String ticketNumber) {
    final ticket = allTickets.firstWhere(
      (t) => t.number == ticketNumber,
      orElse: () => Ticket(id: '', number: '', price: 80.0),
    );

    if (ticket.id.isEmpty || ticket.status != 'available') {
      debugPrint('DEBUG: Cannot select ticket $ticketNumber - not available or not found');
      return;
    }

    debugPrint('DEBUG: Toggling ticket selection - ticketId: ${ticket.id}, number: $ticketNumber');
    
    if (selected.contains(ticket.id)) {
      // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      selected.remove(ticket.id);
      debugPrint('DEBUG: Removed from selection: ${ticket.id}');
      
      // Sync ‡∏Å‡∏±‡∏ö Repository
      if (repo is WebSocketLottoRepository) {
        final wsRepo = repo as WebSocketLottoRepository;
        wsRepo.deselectTicket(ticket.id);
      }
    } else {
      // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡πã‡∏ß
      selected.add(ticket.id);
      debugPrint('DEBUG: Added to selection: ${ticket.id}');
      
      // Sync ‡∏Å‡∏±‡∏ö Repository
      if (repo is WebSocketLottoRepository) {
        final wsRepo = repo as WebSocketLottoRepository;
        wsRepo.selectTicket(ticket.id);
      }
    }
    
    debugPrint('DEBUG: Current App State selection: $selected');
    notifyListeners();
  }

  int get selectedCost {
    if (selected.isEmpty) return 0;

    double totalCost = 0;
    for (final ticketId in selected) {
      final ticket = allTickets.firstWhere(
        (t) => t.id == ticketId,
        orElse: () => Ticket(id: '', number: '', price: 80.0),
      );
      if (ticket.id.isNotEmpty) totalCost += ticket.price;
    }
    return totalCost.round();
  }

  Future<bool> purchaseSelected() async {
    if (currentUser == null || selected.isEmpty) {
      debugPrint('DEBUG: Cannot purchase - no user or no selected tickets');
      return false;
    }

    try {
      debugPrint('DEBUG: Starting purchase for ${selected.length} tickets: $selected');
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏±‡∏á available ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      final availableSelected = selected.where((ticketId) {
        final ticket = allTickets.firstWhere(
          (t) => t.id == ticketId,
          orElse: () => Ticket(id: '', number: '', price: 80.0),
        );
        return ticket.id.isNotEmpty && ticket.status == 'available';
      }).toList();
      
      if (availableSelected.isEmpty) {
        errorMessage = '‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß';
        notifyListeners();
        return false;
      }
      
      if (availableSelected.length != selected.length) {
        debugPrint('DEBUG: Some selected tickets are no longer available');
        errorMessage = '‡∏ö‡∏≤‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏ñ‡∏π‡∏Å‡∏Ç‡∏≤‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà';
        
        // ‡∏•‡∏ö‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà available ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å selection
        selected.clear();
        selected.addAll(availableSelected);
        
        notifyListeners();
        return false;
      }

      if (repo is WebSocketLottoRepository) {
        final wsRepo = repo as WebSocketLottoRepository;
        
        debugPrint('DEBUG: App State selected: $selected');
        debugPrint('DEBUG: Repository selected: ${wsRepo.selectedTickets}');
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Repository ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (wsRepo.selectedTickets.isEmpty && selected.isNotEmpty) {
          debugPrint('DEBUG: Repository selection is empty, syncing from App State...');
          
          // Sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å App State ‡πÑ‡∏õ Repository
          for (final ticketId in selected) {
            await wsRepo.selectTicket(ticketId);
          }
        }
        
        // ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        await wsRepo.purchaseSelectedTickets();
        
        debugPrint('DEBUG: Purchase completed successfully');
        
        // ‡∏•‡∏ö selected tickets ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        selected.clear();
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï current user ‡∏à‡∏≤‡∏Å repository (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï)
        if (wsRepo.currentUser != null) {
          currentUser = wsRepo.currentUser;
          debugPrint('DEBUG: Updated current user from repository - wallet: ${currentUser?.currentWallet}');
        }
        
        // real-time update ‡∏à‡∏∞‡∏°‡∏≤‡∏à‡∏≤‡∏Å purchase:success event ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
        
      } else {
        final updatedUser = await repo.purchaseTickets(
          userId: currentUser!.id,
          ticketIds: selected.toList(),
        );
        if (updatedUser != null) currentUser = updatedUser;
        
        await loadTickets();
        selected.clear();
      }

      notifyListeners();
      debugPrint('DEBUG: Purchase process completed successfully');
      return true;
    } catch (e) {
      debugPrint('DEBUG: Purchase error: $e');
      errorMessage = '‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏ï‡∏±‡πã‡∏ß‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $e';
      notifyListeners();
      return false;
    }
  }

  // ======================================================
  // DRAW & PRIZE MANAGEMENT METHODS
  // ======================================================

  Future<DrawResult> drawPrizes({
    required String poolType,
    required List<int> rewards,
  }) async {
    debugPrint('DEBUG: drawPrizes called with poolType: $poolType, rewards: $rewards');
    
    try {
      // ‡πÅ‡∏™‡∏î‡∏á loading state
      isLoading = true;
      notifyListeners();
      
      DrawResult result;
      if (repo is WebSocketLottoRepository) {
        debugPrint('DEBUG: Using WebSocket repository for draw prizes');
        result = await repo.drawPrizes(poolType: poolType, rewards: rewards);
      } else {
        debugPrint('DEBUG: Using in-memory repository for draw prizes');
        result = await repo.drawPrizes(poolType: poolType, rewards: rewards);
      }
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï latestDraw
      latestDraw = result;
      debugPrint('DEBUG: Draw completed successfully, result ID: ${result.id}');
      
      // ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡πã‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
      if (repo is WebSocketLottoRepository) {
        await loadTickets();
        await loadLatestDraw();
      }
      
      isLoading = false;
      notifyListeners();
      return result;
      
    } catch (e) {
      debugPrint('DEBUG: Draw prizes error: $e');
      errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•: $e';
      isLoading = false;
      notifyListeners();
      rethrow;
    }
  }

  Future<void> loadLatestDraw() async {
    debugPrint('*************************************');
    debugPrint('DEBUG: AppState.loadLatestDraw START');
    try {
      debugPrint('DEBUG: Calling repo.getLatestDraw()...');
      
      // Check if WebSocket repository - skip if not implemented
      if (repo is WebSocketLottoRepository) {
        debugPrint('DEBUG: WebSocket repository - getLatestDraw not yet implemented');
        latestDraw = null;
        errorMessage = null;
        notifyListeners();
        return;
      }
      
      latestDraw = await repo.getLatestDraw();
      debugPrint('DEBUG: Repo call completed');
      debugPrint('DEBUG: latestDraw result: ${latestDraw?.id}');
      
      if (latestDraw != null) {
        debugPrint('DEBUG: Draw has ${latestDraw!.prizes.length} prizes:');
        for (int i = 0; i < latestDraw!.prizes.length; i++) {
          final prize = latestDraw!.prizes[i];
          debugPrint('  [${i + 1}] Tier ${prize.tier}: ticketId="${prize.ticketId}", amount=${prize.amount}');
        }
      } else {
        debugPrint('DEBUG: No draw found (latestDraw is null)');
      }
      
      errorMessage = null;
      notifyListeners();
      debugPrint('DEBUG: AppState.loadLatestDraw COMPLETED');
    } catch (e, stackTrace) {
      debugPrint('ERROR: AppState.loadLatestDraw failed: $e');
      debugPrint('Stack trace: $stackTrace');
      latestDraw = null;
      // Don't show error for unimplemented methods
      if (!e.toString().contains('not implemented')) {
        errorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏î‡πâ: $e';
      }
      notifyListeners();
    }
    debugPrint('*************************************');
  }

  Future<bool> claimTicket(String ticketId) async {
    if (currentUser == null) return false;

    if (repo is WebSocketLottoRepository) {
      debugPrint('Claim ticket not yet implemented for WebSocket repository');
      return false;
    }

    final ok = await repo.claimTicket(userId: currentUser!.id, ticketId: ticketId);
    if (ok) {
      await loadTickets();
      notifyListeners();
    }
    return ok;
  }

  // ======================================================
  // SYSTEM STATISTICS METHODS
  // ======================================================

  Future<SystemStats> getStats() => repo.getSystemStats();

  // ======================================================
  // PRIZE CLAIMING METHODS
  // ======================================================

  Future<bool> claimPrize({
    required String ticketNumber,
    required double prizeAmount,
  }) async {
    if (currentUser == null) return false;

    try {
      // Note: WebSocket repository doesn't have claimPrize method yet
      // This will need to be implemented or use alternative approach
      debugPrint('Prize claiming not yet implemented for WebSocket repository');
      return false;
    } catch (e) {
      debugPrint('Claim prize error: $e');
      errorMessage = '‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $e';
      notifyListeners();
      return false;
    }
  }

  // ======================================================
  // SYSTEM RESET METHODS
  // ======================================================

  Future<void> createLotteryTickets() async {
    if (repo is WebSocketLottoRepository) {
      final wsRepo = repo as WebSocketLottoRepository;
      await wsRepo.createLotteryTickets();
      // Refresh tickets after creation
      await loadTickets();
    }
    notifyListeners();
  }

  Future<void> resetAll() async {
    if (repo is WebSocketLottoRepository) {
      final wsRepo = repo as WebSocketLottoRepository;
      await wsRepo.resetAll();
      // Refresh tickets after reset
      await loadTickets();
    } else {
      await repo.resetAll();
      await loadTickets();
      await loadLatestDraw();
    }
    
    // Clear local state
    selected.clear();
    latestDraw = null;
    notifyListeners();
  }

  // ======================================================
  // PRIZE CHECKING & VALIDATION METHODS
  // ======================================================

  PrizeItem? checkTicketPrize(String ticketNumber) {
    debugPrint('-----------------------------------');
    debugPrint('DEBUG: checkTicketPrize START');
    debugPrint('DEBUG: Checking ticket: "$ticketNumber"');
    
    if (latestDraw == null) {
      debugPrint('DEBUG: checkTicketPrize - latestDraw is null');
      debugPrint('-----------------------------------');
      return null;
    }

    debugPrint('DEBUG: checkTicketPrize - Draw has ${latestDraw!.prizes.length} prizes');
    
    // Normalize ticketNumber ‡πÅ‡∏•‡∏∞ prize.ticketId
    final normalizedTicketNumber = ticketNumber.trim().toLowerCase();
    for (int i = 0; i < latestDraw!.prizes.length; i++) {
      final prize = latestDraw!.prizes[i];
      final normalizedPrizeTicketId = prize.ticketId.trim().toLowerCase();
      debugPrint('DEBUG: Comparing "$normalizedTicketNumber" with prize[${i + 1}].ticketId: "$normalizedPrizeTicketId"');
      
      if (normalizedPrizeTicketId == normalizedTicketNumber) {
        debugPrint('‚úÖ MATCH FOUND! Ticket "$ticketNumber" won tier ${prize.tier} = ${prize.amount} baht');
        debugPrint('-----------------------------------');
        return prize;
      }
    }
    
    debugPrint('‚ùå No match found for ticket: "$ticketNumber"');
    debugPrint('-----------------------------------');
    return null;
  }

  List<PrizeItem> getUserWinningTickets() {
    if (currentUser == null || latestDraw == null) return [];

    final winningTickets = <PrizeItem>[];
    for (final userTicket in userTickets) {
      final prize = checkTicketPrize(userTicket.number);
      if (prize != null) winningTickets.add(prize);
    }
    return winningTickets;
  }

  Future<bool> claimAllPrizes() async {
    if (currentUser == null) return false;

    final winningTickets = getUserWinningTickets();
    if (winningTickets.isEmpty) return false;

    try {
      double totalPrize = 0;
      for (final prize in winningTickets) totalPrize += prize.amount;

      // Note: Prize claiming functionality needs to be implemented for WebSocket
      // For now, return false until WebSocket claim prize is implemented
      debugPrint('Prize claiming not yet fully implemented for WebSocket repository');
      return false;
    } catch (e) {
      debugPrint('Claim all prizes error: $e');
      errorMessage = '‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $e';
      notifyListeners();
      return false;
    }
  }

  void logout() {
    debugPrint('DEBUG: logout() called');
    debugPrint('DEBUG: Current user before clear: ${currentUser?.username}');

    currentUser = null;
    userTickets.clear();
    allTickets.clear();
    selected.clear();
    latestDraw = null;
    errorMessage = null;
    isLoading = false;

    debugPrint('DEBUG: Current user after clear: ${currentUser?.username}');
    debugPrint('DEBUG: About to call notifyListeners()');
    notifyListeners();
    debugPrint('DEBUG: notifyListeners() called successfully');
  }
  
  // ======================================================
  // CLEANUP METHODS
  // ======================================================
  
  @override
  void dispose() {
    debugPrint('DEBUG: Disposing LottoAppState...');
    _userStreamSubscription?.cancel();
    _ticketsStreamSubscription?.cancel();
    _userTicketsStreamSubscription?.cancel();
    super.dispose();
  }
}