import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:intl/intl.dart';
import '../../services/app_state.dart';
import '../../models.dart';
import '../widgets/common_widgets.dart';

class AdminPage extends StatefulWidget {
  const AdminPage({super.key});

  @override
  State<AdminPage> createState() => _AdminPageState();
}

class _AdminPageState extends State<AdminPage>
    with SingleTickerProviderStateMixin {
  late final TabController _tab;
  String pool = 'sold';
  String selectedAction = 'draw'; // 'draw' or 'create'
  final p1 = TextEditingController(text: '1000000');
  final p2 = TextEditingController(text: '500000');
  final p3 = TextEditingController(text: '100000');
  final p4 = TextEditingController(text: '50000');
  final p5 = TextEditingController(text: '10000');

  final formatter = NumberFormat.decimalPattern('th');

  @override
  void initState() {
    super.initState();
    _tab = TabController(length: 3, vsync: this);
  }

  @override
  void dispose() {
    _tab.dispose();
    p1.dispose();
    p2.dispose();
    p3.dispose();
    p4.dispose();
    p5.dispose();
    super.dispose();
  }

  Color _getTierColor(int tier) {
    switch (tier) {
      case 1:
        return Colors.red;
      case 2:
        return Colors.orange;
      case 3:
        return Colors.blue;
      case 4:
        return Colors.green;
      case 5:
        return Colors.purple;
      default:
        return Colors.grey;
    }
  }

  @override
  Widget build(BuildContext context) {
    final s = context.watch<LottoAppState>();

    return Scaffold(
      appBar: AppBar(
        title: const Text('‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö'),
        actions: [
          TextButton(
            onPressed: s.logout,
            child: const Text(
              '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö',
              style: TextStyle(color: Colors.redAccent),
            ),
          ),
        ],
        bottom: TabBar(
          controller: _tab,
          tabs: const [
            Tab(text: '‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•'),
            Tab(text: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö'),
            Tab(text: '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö'),
          ],
        ),
      ),
      body: TabBarView(
        controller: _tab,
        children: [
          _buildDrawTab(s),
          _buildStatusTab(s),
          _buildResetTab(s),
        ],
      ),
    );
  }

  Widget _buildDrawTab(LottoAppState s) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•',
            style: TextStyle(fontSize: 18, color: Colors.amberAccent),
          ),
          const SizedBox(height: 12),
          // Always show draw interface
          ..._buildDrawInterface(),
          const SizedBox(height: 16),
          // Single action button for drawing prizes
          SizedBox(
            width: double.infinity,
            child: ElevatedButton(
              style: ElevatedButton.styleFrom(
                backgroundColor:
                    pool == 'create' ? Colors.green : const Color(0xFFF59E0B),
                padding: const EdgeInsets.symmetric(vertical: 14),
              ),
              onPressed: () {
                if (pool == 'create') {
                  _handleCreateAction(s);
                } else {
                  _handleDrawAction(s);
                }
              },
              child: Text(
                pool == 'create'
                    ? 'üé´ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏•‡∏≠‡∏ï‡πÇ‡∏ï‡πà 120 ‡πÉ‡∏ö‡πÉ‡∏´‡∏°‡πà (‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤) üé´'
                    : '‚ú® ‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• ‚ú®',
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: pool == 'create' ? Colors.white : Colors.black,
                ),
              ),
            ),
          ),
          const SizedBox(height: 12),
        ],
      ),
    );
  }

  List<Widget> _buildDrawInterface() {
    return [
      DropdownButtonFormField<String>(
        value: pool,
        decoration: const InputDecoration(
          filled: true,
          fillColor: Color(0xFF1F2937),
          border: OutlineInputBorder(),
        ),
        items: const [
          DropdownMenuItem(
            value: 'sold',
            child: Text('‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'),
          ),
          DropdownMenuItem(
            value: 'all',
            child: Text('‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'),
          ),
          DropdownMenuItem(
            value: 'create',
            child: Text('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà 120 ‡πÉ‡∏ö'),
          ),
        ],
        onChanged: (v) => setState(() {
          pool = v ?? 'sold';
          if (v == 'create') {
            selectedAction = 'create';
          } else {
            selectedAction = 'draw';
          }
        }),
      ),
      const SizedBox(height: 12),
      GridView.count(
        shrinkWrap: true,
        crossAxisCount: 2,
        childAspectRatio: 2.8,
        crossAxisSpacing: 12,
        mainAxisSpacing: 12,
        children: [
          PrizeInputField(label: '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1 (‡∏ö‡∏≤‡∏ó)', controller: p1),
          PrizeInputField(label: '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2 (‡∏ö‡∏≤‡∏ó)', controller: p2),
          PrizeInputField(label: '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 3 (‡∏ö‡∏≤‡∏ó)', controller: p3),
          PrizeInputField(label: '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 4 (‡∏ö‡∏≤‡∏ó)', controller: p4),
          PrizeInputField(label: '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 5 (‡∏ö‡∏≤‡∏ó)', controller: p5),
        ],
      ),
    ];
  }

  List<Widget> _buildCreateInterface() {
    return [
      Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: const Color(0xFF1F2937),
          borderRadius: BorderRadius.circular(8),
        ),
        child: const Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Colors.green,
              ),
            ),
            SizedBox(height: 8),
            Text('‚Ä¢ ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà 120 ‡πÉ‡∏ö'),
            Text('‚Ä¢ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç 6 ‡∏´‡∏•‡∏±‡∏Å (000000-999999)'),
            Text('‚Ä¢ ‡∏£‡∏≤‡∏Ñ‡∏≤ 80 ‡∏ö‡∏≤‡∏ó/‡πÉ‡∏ö'),
            SizedBox(height: 8),
            Text(
              '‚ö†Ô∏è ‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
              style: TextStyle(
                color: Colors.orange,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
      ),
    ];
  }

  Future<void> _handleAction(LottoAppState s) async {
    if (selectedAction == 'draw') {
      await _handleDrawAction(s);
    } else {
      await _handleCreateAction(s);
    }
  }

  Future<void> _handleCreateAction(LottoAppState s) async {
    if (!s.isAdmin) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÑ‡∏î‡πâ'),
            backgroundColor: Colors.red,
          ),
        );
      }
      return;
    }

    final confirmed = await showDialog<bool>(
      context: context,
      builder: (_) => AlertDialog(
        backgroundColor: const Color(0xFF111827),
        title: const Text('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà'),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà 120 ‡πÉ‡∏ö'),
            Text('‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç 6 ‡∏´‡∏•‡∏±‡∏Å (000000-999999)'),
            Text('‡∏£‡∏≤‡∏Ñ‡∏≤ 80 ‡∏ö‡∏≤‡∏ó/‡πÉ‡∏ö'),
            SizedBox(height: 8),
            Text(
              '‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
              style:
                  TextStyle(color: Colors.orange, fontWeight: FontWeight.bold),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
          ),
          ElevatedButton(
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green,
            ),
            onPressed: () => Navigator.pop(context, true),
            child: const Text('‡∏™‡∏£‡πâ‡∏≤‡∏á', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );

    if (confirmed == true) {
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => const AlertDialog(
          backgroundColor: Color(0xFF1F2937),
          content: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              CircularProgressIndicator(),
              SizedBox(width: 16),
              Text('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà...',
                  style: TextStyle(color: Colors.white)),
            ],
          ),
        ),
      );

      try {
        await s.createLotteryTickets();
        if (mounted) {
          Navigator.of(context).pop();
        }
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà 120 ‡πÉ‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ'),
              backgroundColor: Colors.green,
              duration: Duration(seconds: 3),
            ),
          );
        }
      } catch (e) {
        if (mounted) {
          Navigator.of(context).pop();
        }
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    }
  }

  Future<void> _handleDrawAction(LottoAppState s) async {
    if (!s.isAdmin) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏î‡πâ'),
            backgroundColor: Colors.red,
          ),
        );
      }
      return;
    }

    final rewards = [p1, p2, p3, p4, p5]
        .map((c) => int.tryParse(c.text.trim()) ?? 0)
        .toList();

    if (rewards.any((r) => r <= 0)) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'),
            backgroundColor: Colors.red,
          ),
        );
      }
      return;
    }

    final confirmed = await showDialog<bool>(
      context: context,
      builder: (_) => AlertDialog(
        backgroundColor: const Color(0xFF111827),
        title: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
                '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${pool == 'sold' ? '‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô' : '‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'}'),
            const SizedBox(height: 8),
            const Text('‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•:'),
            ...rewards.asMap().entries.map((entry) {
              final tier = entry.key + 1;
              final amount = entry.value;
              return Text('‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà $tier: ${formatter.format(amount)} ‡∏ö‡∏≤‡∏ó');
            }),
            const SizedBox(height: 16),
            const Text(
              '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
          ),
          ElevatedButton(
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.amber,
            ),
            onPressed: () => Navigator.pop(context, true),
            child: const Text(
              '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
              style: TextStyle(color: Colors.black),
            ),
          ),
        ],
      ),
    );

    if (confirmed != true) return;

    try {
      final result = await s.drawPrizes(
        poolType: pool,
        rewards: rewards,
      );

      if (mounted) {
        showDialog(
          context: context,
          builder: (_) => AlertDialog(
            backgroundColor: const Color(0xFF111827),
            title: const Text(
              'üèÜ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• LOTTO!',
              style: TextStyle(
                color: Colors.amber,
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            content: Container(
              width: double.maxFinite,
              constraints: const BoxConstraints(maxHeight: 400),
              child: SingleChildScrollView(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: const Color(0xFF1F2937),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Column(
                        children: [
                          Row(
                            children: [
                              const Icon(Icons.schedule,
                                  color: Colors.blue, size: 16),
                              const SizedBox(width: 8),
                              Expanded(
                                child: Text(
                                  '‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${DateFormat('dd/MM/yyyy HH:mm').format(result.createdAt)}',
                                  style: const TextStyle(
                                      color: Colors.grey, fontSize: 14),
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(height: 16),
                    const Text(
                      'üèÖ ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•',
                      style: TextStyle(
                        color: Colors.amber,
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 12),
                    ...result.prizes.map((p) {
                      final ticket = s.allTickets.firstWhere(
                        (t) => t.id == p.ticketId || t.number == p.ticketId,
                        orElse: () =>
                            Ticket(id: '', number: p.ticketId, price: 80.0),
                      );
                      return Container(
                        margin: const EdgeInsets.only(bottom: 8),
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: _getTierColor(p.tier).withOpacity(0.8),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Row(
                          children: [
                            Container(
                              width: 32,
                              height: 32,
                              decoration: BoxDecoration(
                                color: Colors.white,
                                borderRadius: BorderRadius.circular(16),
                              ),
                              child: Center(
                                child: Text(
                                  '${p.tier}',
                                  style: TextStyle(
                                    color: _getTierColor(p.tier),
                                    fontWeight: FontWeight.bold,
                                    fontSize: 14,
                                  ),
                                ),
                              ),
                            ),
                            const SizedBox(width: 12),
                            Expanded(
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà ${p.tier}',
                                    style: const TextStyle(
                                      fontWeight: FontWeight.bold,
                                      color: Colors.white,
                                      fontSize: 14,
                                    ),
                                  ),
                                  Text(
                                    '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç: ${ticket.number}',
                                    style: const TextStyle(
                                      color: Colors.white70,
                                      fontSize: 12,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                            Text(
                              '${formatter.format(p.amount)} ‡∏ö‡∏≤‡∏ó',
                              style: const TextStyle(
                                color: Colors.white,
                                fontWeight: FontWeight.bold,
                                fontSize: 14,
                              ),
                            ),
                          ],
                        ),
                      );
                    }),
                  ],
                ),
              ),
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text(
                  '‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
                  style: TextStyle(color: Colors.amber),
                ),
              ),
            ],
          ),
        );
      }
    } catch (e) {
      debugPrint('DEBUG: Draw error occurred: $e');

      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
      String errorString = e.toString();

      if (errorString.contains('NO_SOLD_TICKETS') ||
          errorString.contains('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö')) {
        // ‡πÅ‡∏™‡∏î‡∏á dialog ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß
        if (mounted) {
          final shouldChangeToAll = await showDialog<bool>(
            context: context,
            builder: (_) => AlertDialog(
              backgroundColor: const Color(0xFF111827),
              title: const Text('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß'),
              content: const Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'),
                  Text('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏î‡πâ'),
                  SizedBox(height: 16),
                  Text('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?'),
                ],
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(context, false),
                  child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
                ),
                ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.amber,
                  ),
                  onPressed: () => Navigator.pop(context, true),
                  child: const Text('‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                      style: TextStyle(color: Colors.black)),
                ),
              ],
            ),
          );

          if (shouldChangeToAll == true) {
            setState(() {
              pool = 'all';
            });
            // ‡∏•‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢ 'all' mode
            _handleDrawAction(s);
            return;
          }
        }
      } else if (errorString.contains('INSUFFICIENT_SOLD_TICKETS') ||
          errorString.contains('‡∏°‡∏µ‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏µ‡∏¢‡∏á')) {
        // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
        if (mounted) {
          showDialog(
            context: context,
            builder: (_) => AlertDialog(
              backgroundColor: const Color(0xFF111827),
              title: const Text('‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠'),
              content: const Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text('‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠'),
                  Text('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ 5 ‡πÉ‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•'),
                  SizedBox(height: 16),
                  Text('‡∏Ç‡πâ‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:'),
                  Text('1. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô"‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"'),
                  Text('2. ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≤‡∏¢‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô'),
                ],
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text('‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö'),
                ),
              ],
            ),
          );
        }
      } else if (errorString.contains('INSUFFICIENT_TICKETS') ||
          errorString.contains('‡∏°‡∏µ‡∏ï‡∏±‡πã‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏µ‡∏¢‡∏á')) {
        // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡∏±‡πã‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 'all' mode)
        if (mounted) {
          showDialog(
            context: context,
            builder: (_) => AlertDialog(
              backgroundColor: const Color(0xFF111827),
              title: const Text('‡∏ï‡∏±‡πã‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠'),
              content: const Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text('‡∏ï‡∏±‡πã‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠'),
                  Text('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ 5 ‡πÉ‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•'),
                  SizedBox(height: 16),
                  Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡πã‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•'),
                  Text('‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡πã‡∏ß‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà" ‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π'),
                ],
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text('‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö'),
                ),
              ],
            ),
          );
        }
      } else {
        // ‡∏Å‡∏£‡∏ì‡∏µ error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $errorString'),
              backgroundColor: Colors.red,
              duration: const Duration(seconds: 5),
            ),
          );
        }
      }
    }
  }

  Widget _buildStatusTab(LottoAppState s) {
    return FutureBuilder(
      future: s.getStats(),
      builder: (context, snap) {
        if (!snap.hasData) {
          return const Center(child: CircularProgressIndicator());
        }

        final st = snap.data as SystemStats;
        final stats = [
          {'title': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å', 'value': '${st.totalMembers}'},
          {'title': '‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'value': '${st.ticketsSold}'},
          {'title': '‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠', 'value': '${st.ticketsLeft}'},
          {
            'title': '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)',
            'value': formatter.format(st.totalValue.toInt())
          },
        ];

        return Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
              colors: [
                Color(0xFF1E293B),
                Color(0xFF0F172A),
              ],
            ),
          ),
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  '‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö',
                  style: TextStyle(
                    color: Color(0xFF60A5FA),
                    fontSize: 18,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                const SizedBox(height: 20),
                // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 2 columns ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö aspect ratio
                Expanded(
                  child: GridView.builder(
                    physics: const BouncingScrollPhysics(),
                    itemCount: stats.length,
                    gridDelegate:
                        const SliverGridDelegateWithFixedCrossAxisCount(
                      crossAxisCount: 3, // ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 3 columns
                      crossAxisSpacing: 8,
                      mainAxisSpacing: 12,
                      childAspectRatio:
                          0.85, // ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß
                    ),
                    itemBuilder: (context, index) {
                      final stat = stats[index];
                      return _buildModernStatCard(
                        title: stat['title']!,
                        value: stat['value']!,
                      );
                    },
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _buildModernStatCard({
    required String title,
    required String value,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: const Color(0xFF374151),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: const Color(0xFF4B5563),
          width: 1,
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.3),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.all(12),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            // ‡∏õ‡∏£‡∏±‡∏ö font size ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö 3 columns
            Flexible(
              flex: 3,
              child: FittedBox(
                fit: BoxFit.scaleDown,
                child: Text(
                  value,
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 24, // ‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô 24 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ‡∏Å‡∏±‡∏ö 3 columns
                    fontWeight: FontWeight.bold,
                    letterSpacing: -0.5,
                  ),
                  textAlign: TextAlign.center,
                  maxLines: 1,
                ),
              ),
            ),
            const SizedBox(height: 8),
            // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 3 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
            Flexible(
              flex: 2,
              child: Text(
                title,
                style: const TextStyle(
                  color: Color(0xFFD1D5DB),
                  fontSize: 11, // ‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô 11 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ
                  fontWeight: FontWeight.w500,
                  height: 1.1,
                ),
                textAlign: TextAlign.center,
                maxLines: 3, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô 3 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
                overflow: TextOverflow.ellipsis,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildResetTab(LottoAppState s) {
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Card(
        color: const Color(0xFF7F1D1D),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              const Text(
                '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                style: TextStyle(fontSize: 18, color: Colors.redAccent),
              ),
              const SizedBox(height: 8),
              const Text(
                '‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å, ‡∏•‡∏≠‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö',
              ),
              const SizedBox(height: 16),
              ElevatedButton(
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.redAccent,
                  padding: const EdgeInsets.symmetric(vertical: 14),
                ),
                onPressed: () async {
                  final ok = await showDialog<bool>(
                        context: context,
                        builder: (_) => AlertDialog(
                          backgroundColor: const Color(0xFF111827),
                          title: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö'),
                          content:
                              const Text('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?'),
                          actions: [
                            TextButton(
                              onPressed: () => Navigator.pop(context, false),
                              child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
                            ),
                            TextButton(
                              onPressed: () => Navigator.pop(context, true),
                              child: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô'),
                            ),
                          ],
                        ),
                      ) ??
                      false;

                  if (ok) {
                    await s.resetAll();
                    if (mounted) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(content: Text('‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢')),
                      );
                    }
                  }
                },
                child: const Text(
                  '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
